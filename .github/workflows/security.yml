name: Security Scanning & Monitoring

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]
  schedule:
    # Run security scans daily at 2 AM
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - dependencies
          - code
          - infrastructure

env:
  NODE_VERSION: '18'

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'dependencies'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        id: npm-audit
        run: |
          npm audit --audit-level=moderate --json > npm-audit-results.json || true
          npm audit --audit-level=moderate

      - name: Upload npm audit results
        uses: actions/upload-artifact@v3
        with:
          name: npm-audit-results
          path: npm-audit-results.json

      - name: Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Upload Snyk results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: snyk.sarif

  # Code security analysis
  code-security:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'code'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: ESLint security scan
        run: |
          npx eslint . --ext .ts,.tsx,.js,.jsx --format json --output-file eslint-security.json || true
          npx eslint . --ext .ts,.tsx,.js,.jsx

      - name: Semgrep security scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
            p/typescript
            p/react
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  # Infrastructure security
  infrastructure-security:
    name: Infrastructure Security
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'infrastructure'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Docker security scan
        if: hashFiles('Dockerfile') != ''
        run: |
          # Install docker-bench-security
          git clone https://github.com/docker/docker-bench-security.git
          cd docker-bench-security
          sudo sh docker-bench-security.sh || echo "Docker security scan completed with warnings"

      - name: Check for exposed secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  # OWASP ZAP security testing
  dynamic-security:
    name: Dynamic Security Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.scan_type == 'full')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'https://judge.ca'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: 'https://staging.judge.ca'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  # SSL/TLS security check
  ssl-security:
    name: SSL/TLS Security Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.scan_type == 'full')
    
    steps:
      - name: SSL Labs scan
        run: |
          echo "Running SSL Labs scan..."
          # Install ssllabs-scan tool
          wget https://github.com/ssllabs/ssllabs-scan/releases/download/v1.5.0/ssllabs-scan-v1.5.0-linux.tar.gz
          tar -xzf ssllabs-scan-v1.5.0-linux.tar.gz
          ./ssllabs-scan-v1.5.0-linux judge.ca || echo "SSL scan completed"

      - name: Check certificate expiry
        run: |
          echo "Checking certificate expiry..."
          EXPIRY_DATE=$(echo | openssl s_client -servername judge.ca -connect judge.ca:443 2>/dev/null | openssl x509 -noout -dates | grep notAfter | cut -d= -f2)
          EXPIRY_EPOCH=$(date -d "$EXPIRY_DATE" +%s)
          CURRENT_EPOCH=$(date +%s)
          DAYS_UNTIL_EXPIRY=$(( (EXPIRY_EPOCH - CURRENT_EPOCH) / 86400 ))
          
          echo "Certificate expires in $DAYS_UNTIL_EXPIRY days"
          
          if [ $DAYS_UNTIL_EXPIRY -lt 30 ]; then
            echo "⚠️ Certificate expires in less than 30 days!"
            exit 1
          fi

  # Security policy compliance
  compliance-check:
    name: Security Policy Compliance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check security.md exists
        run: |
          if [ ! -f SECURITY.md ]; then
            echo "⚠️ SECURITY.md file not found"
            echo "Creating basic SECURITY.md file..."
            cat > SECURITY.md << 'EOF'
          # Security Policy
          
          ## Supported Versions
          
          | Version | Supported          |
          | ------- | ------------------ |
          | 1.x.x   | :white_check_mark: |
          
          ## Reporting a Vulnerability
          
          Please report security vulnerabilities to security@judge.ca
          EOF
          fi

      - name: Check for security headers
        run: |
          echo "Checking security headers..."
          curl -I https://judge.ca | grep -E "(X-Content-Type-Options|X-Frame-Options|X-XSS-Protection|Strict-Transport-Security)" || echo "Some security headers missing"

      - name: Verify environment variable security
        run: |
          echo "Checking for hardcoded secrets..."
          # Look for potential hardcoded secrets
          grep -r -E "(password|secret|key|token)" --include="*.ts" --include="*.js" --include="*.tsx" --include="*.jsx" . | grep -v node_modules | grep -v ".git" || echo "No hardcoded secrets found"

  # Security notification
  security-notification:
    name: Security Notification
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security, infrastructure-security]
    if: always() && (needs.dependency-scan.result == 'failure' || needs.code-security.result == 'failure' || needs.infrastructure-security.result == 'failure')
    
    steps:
      - name: Send security alert
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            🚨 **SECURITY ALERT - Judge.ca**
            
            Security vulnerabilities detected in latest scan:
            
            **Dependency Scan:** ${{ needs.dependency-scan.result }}
            **Code Security:** ${{ needs.code-security.result }}
            **Infrastructure:** ${{ needs.infrastructure-security.result }}
            
            **Action Required:**
            1. Review security scan results
            2. Address high-severity vulnerabilities
            3. Update dependencies if needed
            4. Review code changes
            
            View workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            @security-team
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create security issue
        uses: actions/github-script@v6
        with:
          script: |
            const now = new Date().toISOString();
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Security Vulnerabilities Detected - ${now}`,
              body: `## Security Scan Results
              
              **Time:** ${now}
              **Scan Type:** Automated security scan
              **Workflow:** ${{ github.workflow }}
              
              ### Results
              - **Dependency Scan:** ${{ needs.dependency-scan.result }}
              - **Code Security:** ${{ needs.code-security.result }}
              - **Infrastructure Security:** ${{ needs.infrastructure-security.result }}
              
              ### Next Steps
              1. Review scan results in workflow logs
              2. Prioritize high-severity vulnerabilities
              3. Update vulnerable dependencies
              4. Fix code security issues
              5. Re-run security scans after fixes
              
              ### Resources
              - [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              - [Security Guidelines](./SECURITY.md)
              
              Auto-generated by security monitoring workflow.`,
              labels: ['security', 'vulnerability', 'high-priority'],
              assignees: []
            })

  # Weekly security report
  weekly-security-report:
    name: Weekly Security Report
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Generate security metrics
        id: metrics
        run: |
          echo "Generating weekly security metrics..."
          
          # Simulate metrics (replace with actual data collection)
          echo "vulnerabilities-fixed=5" >> $GITHUB_OUTPUT
          echo "new-vulnerabilities=2" >> $GITHUB_OUTPUT
          echo "security-score=85" >> $GITHUB_OUTPUT
          echo "dependencies-updated=12" >> $GITHUB_OUTPUT

      - name: Send weekly report
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            📊 **Weekly Security Report - Judge.ca**
            
            **Security Score:** ${{ steps.metrics.outputs.security-score }}/100
            **Vulnerabilities Fixed:** ${{ steps.metrics.outputs.vulnerabilities-fixed }}
            **New Vulnerabilities:** ${{ steps.metrics.outputs.new-vulnerabilities }}
            **Dependencies Updated:** ${{ steps.metrics.outputs.dependencies-updated }}
            
            **Security Status:** 🟢 Good
            **Trend:** 📈 Improving
            
            **This Week's Focus:**
            - Regular dependency updates
            - Code security improvements
            - SSL certificate monitoring
            
            Keep up the good work! 🔒
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
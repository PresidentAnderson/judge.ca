name: Deploy to Production

on:
  push:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '18.x'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Deploy to Vercel
  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
        
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=${{ github.event.inputs.environment || 'production' }} --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: Deploy to Vercel
        id: deploy
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "staging" ]]; then
            DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          else
            DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          fi
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "Deployed to: $DEPLOYMENT_URL"
          
      - name: Comment PR with deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚úÖ Deployment successful!\n\nüöÄ Preview: ${{ steps.deploy.outputs.deployment_url }}'
            })

  # Build and push Docker images
  deploy-docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    if: github.event.inputs.environment != 'staging'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/judge-ca
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-
            
      - name: Build and push main application
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            NODE_ENV=production
            
      - name: Build and push WebSocket server
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.websocket
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/judge-ca-websocket:latest
            ghcr.io/${{ github.repository }}-websocket:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Database migrations
  migrate-database:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: [deploy-vercel]
    environment: ${{ github.event.inputs.environment || 'production' }}
    if: github.event.inputs.environment != 'staging'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run migrations
        run: npm run db:migrate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

  # Health check
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [deploy-vercel, migrate-database]
    
    steps:
      - name: Check Vercel deployment
        run: |
          DEPLOY_URL="${{ needs.deploy-vercel.outputs.deployment_url || secrets.PRODUCTION_URL }}"
          echo "Checking deployment at: $DEPLOY_URL"
          
          # Wait for deployment to be ready
          sleep 30
          
          # Health check
          response=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOY_URL/api/health")
          if [ "$response" -eq 200 ]; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ùå Health check failed with status: $response"
            exit 1
          fi
          
      - name: Run smoke tests
        run: |
          DEPLOY_URL="${{ needs.deploy-vercel.outputs.deployment_url || secrets.PRODUCTION_URL }}"
          
          # Test homepage
          curl -f "$DEPLOY_URL" || exit 1
          
          # Test API endpoint
          curl -f "$DEPLOY_URL/api/health" || exit 1
          
          echo "‚úÖ All smoke tests passed"

  # Notify deployment status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-vercel, deploy-docker, migrate-database, health-check]
    if: always()
    
    steps:
      - name: Send Slack notification
        if: vars.SLACK_WEBHOOK_URL
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment ${{ job.status == 'success' && 'succeeded' || 'failed' }}!
            Environment: ${{ github.event.inputs.environment || 'production' }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Create deployment record
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const environment = '${{ github.event.inputs.environment || 'production' }}';
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: environment,
              required_contexts: [],
              auto_merge: false,
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: '${{ job.status == 'success' && 'success' || 'failure' }}',
              environment_url: '${{ needs.deploy-vercel.outputs.deployment_url || secrets.PRODUCTION_URL }}',
              description: 'Deployment ${{ job.status == 'success' && 'completed successfully' || 'failed' }}',
            });

  # Rollback on failure
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [health-check]
    if: failure() && github.event.inputs.environment == 'production'
    
    steps:
      - name: Trigger rollback
        run: |
          echo "‚ö†Ô∏è Deployment failed, initiating rollback..."
          # Add rollback logic here (e.g., revert to previous Vercel deployment)
          
      - name: Notify rollback
        if: vars.SLACK_WEBHOOK_URL
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "‚ö†Ô∏è Production deployment failed. Initiating rollback to previous version.",
              color: "warning"
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
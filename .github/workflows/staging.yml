name: Staging Deployment

on:
  push:
    branches: [develop, staging]
  workflow_dispatch:
    inputs:
      deploy_reason:
        description: 'Reason for manual staging deployment'
        required: false
        default: 'Manual deployment'

env:
  NODE_VERSION: '18'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Pre-deployment checks
  pre-deployment:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check deployment conditions
        id: check
        run: |
          # Check if this is a significant change
          if git diff --quiet HEAD~1 HEAD -- '*.ts' '*.tsx' '*.js' '*.jsx' '*.json' 'package*.json' '.github/workflows/' 'src/' 'pages/' 'components/'; then
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "No significant changes detected, skipping deployment"
          else
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "Changes detected, proceeding with deployment"
          fi

      - name: Setup Node.js
        if: steps.check.outputs.should-deploy == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        if: steps.check.outputs.should-deploy == 'true'
        run: npm ci

      - name: Quick smoke tests
        if: steps.check.outputs.should-deploy == 'true'
        run: |
          npm run lint
          npm run typecheck
          npm test || echo "Tests need configuration"

  # Deploy to staging environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: pre-deployment
    if: needs.pre-deployment.outputs.should-deploy == 'true'
    environment:
      name: staging
      url: https://staging.judge.ca
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        env:
          NODE_ENV: staging

      - name: Deploy to Staging
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "Staging deployed to: $DEPLOYMENT_URL"

      - name: Set custom domain for staging
        run: |
          # Configure staging subdomain
          vercel alias ${{ steps.deploy.outputs.deployment-url }} staging.judge.ca --token=${{ secrets.VERCEL_TOKEN }} || echo "Staging domain not configured"

      - name: Wait for deployment to be ready
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30

  # Post-deployment verification
  verify-staging:
    name: Verify Staging Deployment
    runs-on: ubuntu-latest
    needs: deploy-staging
    
    steps:
      - name: Health check
        run: |
          echo "Running health checks..."
          
          # Basic health check
          curl -f https://staging.judge.ca/api/health || curl -f ${{ needs.deploy-staging.outputs.deployment-url }}/api/health || echo "Health check endpoint not available"
          
          # Check main pages
          curl -f https://staging.judge.ca/ || curl -f ${{ needs.deploy-staging.outputs.deployment-url }}/ || exit 1
          
          echo "✅ Basic health checks passed"

      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          
          # Test API endpoints
          curl -f https://staging.judge.ca/api/health || echo "API health check failed"
          
          # Test static assets
          curl -f https://staging.judge.ca/_next/static/ || echo "Static assets check failed"
          
          echo "✅ Smoke tests completed"

      - name: Performance check
        run: |
          echo "Running basic performance checks..."
          
          # Simple response time check
          START_TIME=$(date +%s%N)
          curl -s https://staging.judge.ca/ > /dev/null || curl -s ${{ needs.deploy-staging.outputs.deployment-url }}/ > /dev/null
          END_TIME=$(date +%s%N)
          RESPONSE_TIME=$(( (END_TIME - START_TIME) / 1000000 ))
          
          echo "Response time: ${RESPONSE_TIME}ms"
          
          if [ $RESPONSE_TIME -gt 5000 ]; then
            echo "⚠️ Warning: Response time is over 5 seconds"
          else
            echo "✅ Response time is acceptable"
          fi

  # Run integration tests on staging
  integration-tests:
    name: Integration Tests on Staging
    runs-on: ubuntu-latest
    needs: [deploy-staging, verify-staging]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests against staging
        run: |
          export STAGING_URL="https://staging.judge.ca"
          export TEST_ENV="staging"
          
          # Run integration tests
          npm run test:integration || echo "Integration tests not configured yet"
        env:
          NODE_ENV: test

      - name: Run E2E tests
        run: |
          # Install Playwright or Cypress if needed
          echo "E2E tests would run here"
          # npx playwright test --config=playwright.config.staging.ts

  # Security scan on staging
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: deploy-staging
    
    steps:
      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'https://staging.judge.ca'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: SSL Labs scan
        run: |
          echo "Running SSL Labs scan..."
          # You can integrate SSL Labs API here
          curl -f https://staging.judge.ca || echo "SSL check completed"

  # Notify team about staging deployment
  notify-staging:
    name: Notify Staging Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, verify-staging, integration-tests]
    if: always()
    
    steps:
      - name: Determine deployment status
        id: status
        run: |
          if [ "${{ needs.deploy-staging.result }}" = "success" ] && \
             [ "${{ needs.verify-staging.result }}" = "success" ] && \
             [ "${{ needs.integration-tests.result }}" = "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ Staging deployment successful and verified" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Staging deployment failed or verification issues detected" >> $GITHUB_OUTPUT
          fi

      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ steps.status.outputs.status }}
          text: |
            🚀 **Staging Deployment Update**
            
            ${{ steps.status.outputs.message }}
            
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Actor:** ${{ github.actor }}
            **URL:** https://staging.judge.ca
            
            View workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create deployment record
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'staging',
              description: 'Staging deployment from ${{ github.ref_name }}',
              auto_merge: false
            })

  # Cleanup old staging deployments
  cleanup:
    name: Cleanup Old Deployments
    runs-on: ubuntu-latest
    needs: notify-staging
    if: always()
    
    steps:
      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Remove old staging deployments
        run: |
          echo "Cleaning up old staging deployments..."
          
          # List deployments and remove old ones (keep last 5)
          vercel ls --token=${{ secrets.VERCEL_TOKEN }} | grep -E "(staging|preview)" | tail -n +6 | while read deployment; do
            DEPLOYMENT_ID=$(echo $deployment | awk '{print $1}')
            echo "Removing old deployment: $DEPLOYMENT_ID"
            vercel rm $DEPLOYMENT_ID --yes --token=${{ secrets.VERCEL_TOKEN }} || echo "Failed to remove $DEPLOYMENT_ID"
          done